namespace Test;

public class ExpressionTest
{
  [Theory]
  [InlineData(10, "2000-01-01", "2000-01-05", new string[] { })]
  [InlineData(1, "2000-01-01", "2000-01-05", new[] { "2000-01-01" })]
  [InlineData(5, "2000-01-01", "2000-01-05", new[] { "2000-01-05" })]
  [InlineData(3, "2000-01-05", "2001-01-05", new[] { "2000-02-03", "2000-03-03", "2000-04-03", "2000-05-03", "2000-06-03", "2000-07-03", "2000-08-03", "2000-09-03", "2000-10-03", "2000-11-03", "2000-12-03", "2001-01-03" })]
  public void DayConvertToDate(byte _day, string _start, string _end, IEnumerable<string> _expect)
  {
    var model = new ModelDayOffExpression { Day = _day, Reason = "", Off = true, AuthorID = "" };
    var start = DateOnly.Parse(_start);
    var end = DateOnly.Parse(_end);
    var expect = _expect.Select(DateOnly.Parse);

    var result = ConvertDayOffExpression.ConvertToDates(model, start, end);

    Assert.Equal(expect.Count(), result.Count);
    Assert.True(expect.All(result.Contains));
  }

  [Theory]
  [InlineData(EnumMonth.January, "2000-02-01", "2000-02-29", new string[] { })]
  [InlineData(EnumMonth.February, "2000-02-01", "2000-02-29", new[] { "2000-02-01", "2000-02-02", "2000-02-03", "2000-02-04", "2000-02-05", "2000-02-06", "2000-02-07", "2000-02-08", "2000-02-09", "2000-02-10", "2000-02-11", "2000-02-12", "2000-02-13", "2000-02-14", "2000-02-15", "2000-02-16", "2000-02-17", "2000-02-18", "2000-02-19", "2000-02-20", "2000-02-21", "2000-02-22", "2000-02-23", "2000-02-24", "2000-02-25", "2000-02-26", "2000-02-27", "2000-02-28", "2000-02-29" })]
  [InlineData(EnumMonth.February, "2000-02-10", "2000-02-29", new[] { "2000-02-10", "2000-02-11", "2000-02-12", "2000-02-13", "2000-02-14", "2000-02-15", "2000-02-16", "2000-02-17", "2000-02-18", "2000-02-19", "2000-02-20", "2000-02-21", "2000-02-22", "2000-02-23", "2000-02-24", "2000-02-25", "2000-02-26", "2000-02-27", "2000-02-28", "2000-02-29" })]
  [InlineData(EnumMonth.February, "2000-02-01", "2000-02-10", new[] { "2000-02-01", "2000-02-02", "2000-02-03", "2000-02-04", "2000-02-05", "2000-02-06", "2000-02-07", "2000-02-08", "2000-02-09", "2000-02-10" })]
  [InlineData(EnumMonth.January, "2000-01-20", "2002-01-10", new[] { "2000-01-20", "2000-01-21", "2000-01-22", "2000-01-23", "2000-01-24", "2000-01-25", "2000-01-26", "2000-01-27", "2000-01-28", "2000-01-29", "2000-01-30", "2000-01-31", "2001-01-01", "2001-01-02", "2001-01-03", "2001-01-04", "2001-01-05", "2001-01-06", "2001-01-07", "2001-01-08", "2001-01-09", "2001-01-10", "2001-01-11", "2001-01-12", "2001-01-13", "2001-01-14", "2001-01-15", "2001-01-16", "2001-01-17", "2001-01-18", "2001-01-19", "2001-01-20", "2001-01-21", "2001-01-22", "2001-01-23", "2001-01-24", "2001-01-25", "2001-01-26", "2001-01-27", "2001-01-28", "2001-01-29", "2001-01-30", "2001-01-31", "2002-01-01", "2002-01-02", "2002-01-03", "2002-01-04", "2002-01-05", "2002-01-06", "2002-01-07", "2002-01-08", "2002-01-09", "2002-01-10" })]
  public void MonthConvertToDate(EnumMonth _month, string _start, string _end, IEnumerable<string> _expect)
  {
    var model = new ModelDayOffExpression { Month = _month, Reason = "", Off = true, AuthorID = "" };
    var start = DateOnly.Parse(_start);
    var end = DateOnly.Parse(_end);
    var expect = _expect.Select(DateOnly.Parse);

    var result = ConvertDayOffExpression.ConvertToDates(model, start, end);

    Assert.Equal(expect.Count(), result.Count);
    Assert.True(expect.All(result.Contains));
  }


  [Theory]
  [InlineData(2005, "2000-01-01", "2004-12-30", new string[] { })]
  [InlineData(2000, "2000-01-01", "2000-01-05", new[] { "2000-01-01", "2000-01-02", "2000-01-03", "2000-01-04", "2000-01-05" })]
  [InlineData(2001, "2000-01-01", "2005-01-05", new[] { "2001-01-01", "2001-01-02", "2001-01-03", "2001-01-04", "2001-01-05", "2001-01-06", "2001-01-07", "2001-01-08", "2001-01-09", "2001-01-10", "2001-01-11", "2001-01-12", "2001-01-13", "2001-01-14", "2001-01-15", "2001-01-16", "2001-01-17", "2001-01-18", "2001-01-19", "2001-01-20", "2001-01-21", "2001-01-22", "2001-01-23", "2001-01-24", "2001-01-25", "2001-01-26", "2001-01-27", "2001-01-28", "2001-01-29", "2001-01-30", "2001-01-31", "2001-02-01", "2001-02-02", "2001-02-03", "2001-02-04", "2001-02-05", "2001-02-06", "2001-02-07", "2001-02-08", "2001-02-09", "2001-02-10", "2001-02-11", "2001-02-12", "2001-02-13", "2001-02-14", "2001-02-15", "2001-02-16", "2001-02-17", "2001-02-18", "2001-02-19", "2001-02-20", "2001-02-21", "2001-02-22", "2001-02-23", "2001-02-24", "2001-02-25", "2001-02-26", "2001-02-27", "2001-02-28", "2001-03-01", "2001-03-02", "2001-03-03", "2001-03-04", "2001-03-05", "2001-03-06", "2001-03-07", "2001-03-08", "2001-03-09", "2001-03-10", "2001-03-11", "2001-03-12", "2001-03-13", "2001-03-14", "2001-03-15", "2001-03-16", "2001-03-17", "2001-03-18", "2001-03-19", "2001-03-20", "2001-03-21", "2001-03-22", "2001-03-23", "2001-03-24", "2001-03-25", "2001-03-26", "2001-03-27", "2001-03-28", "2001-03-29", "2001-03-30", "2001-03-31", "2001-04-01", "2001-04-02", "2001-04-03", "2001-04-04", "2001-04-05", "2001-04-06", "2001-04-07", "2001-04-08", "2001-04-09", "2001-04-10", "2001-04-11", "2001-04-12", "2001-04-13", "2001-04-14", "2001-04-15", "2001-04-16", "2001-04-17", "2001-04-18", "2001-04-19", "2001-04-20", "2001-04-21", "2001-04-22", "2001-04-23", "2001-04-24", "2001-04-25", "2001-04-26", "2001-04-27", "2001-04-28", "2001-04-29", "2001-04-30", "2001-05-01", "2001-05-02", "2001-05-03", "2001-05-04", "2001-05-05", "2001-05-06", "2001-05-07", "2001-05-08", "2001-05-09", "2001-05-10", "2001-05-11", "2001-05-12", "2001-05-13", "2001-05-14", "2001-05-15", "2001-05-16", "2001-05-17", "2001-05-18", "2001-05-19", "2001-05-20", "2001-05-21", "2001-05-22", "2001-05-23", "2001-05-24", "2001-05-25", "2001-05-26", "2001-05-27", "2001-05-28", "2001-05-29", "2001-05-30", "2001-05-31", "2001-06-01", "2001-06-02", "2001-06-03", "2001-06-04", "2001-06-05", "2001-06-06", "2001-06-07", "2001-06-08", "2001-06-09", "2001-06-10", "2001-06-11", "2001-06-12", "2001-06-13", "2001-06-14", "2001-06-15", "2001-06-16", "2001-06-17", "2001-06-18", "2001-06-19", "2001-06-20", "2001-06-21", "2001-06-22", "2001-06-23", "2001-06-24", "2001-06-25", "2001-06-26", "2001-06-27", "2001-06-28", "2001-06-29", "2001-06-30", "2001-07-01", "2001-07-02", "2001-07-03", "2001-07-04", "2001-07-05", "2001-07-06", "2001-07-07", "2001-07-08", "2001-07-09", "2001-07-10", "2001-07-11", "2001-07-12", "2001-07-13", "2001-07-14", "2001-07-15", "2001-07-16", "2001-07-17", "2001-07-18", "2001-07-19", "2001-07-20", "2001-07-21", "2001-07-22", "2001-07-23", "2001-07-24", "2001-07-25", "2001-07-26", "2001-07-27", "2001-07-28", "2001-07-29", "2001-07-30", "2001-07-31", "2001-08-01", "2001-08-02", "2001-08-03", "2001-08-04", "2001-08-05", "2001-08-06", "2001-08-07", "2001-08-08", "2001-08-09", "2001-08-10", "2001-08-11", "2001-08-12", "2001-08-13", "2001-08-14", "2001-08-15", "2001-08-16", "2001-08-17", "2001-08-18", "2001-08-19", "2001-08-20", "2001-08-21", "2001-08-22", "2001-08-23", "2001-08-24", "2001-08-25", "2001-08-26", "2001-08-27", "2001-08-28", "2001-08-29", "2001-08-30", "2001-08-31", "2001-09-01", "2001-09-02", "2001-09-03", "2001-09-04", "2001-09-05", "2001-09-06", "2001-09-07", "2001-09-08", "2001-09-09", "2001-09-10", "2001-09-11", "2001-09-12", "2001-09-13", "2001-09-14", "2001-09-15", "2001-09-16", "2001-09-17", "2001-09-18", "2001-09-19", "2001-09-20", "2001-09-21", "2001-09-22", "2001-09-23", "2001-09-24", "2001-09-25", "2001-09-26", "2001-09-27", "2001-09-28", "2001-09-29", "2001-09-30", "2001-10-01", "2001-10-02", "2001-10-03", "2001-10-04", "2001-10-05", "2001-10-06", "2001-10-07", "2001-10-08", "2001-10-09", "2001-10-10", "2001-10-11", "2001-10-12", "2001-10-13", "2001-10-14", "2001-10-15", "2001-10-16", "2001-10-17", "2001-10-18", "2001-10-19", "2001-10-20", "2001-10-21", "2001-10-22", "2001-10-23", "2001-10-24", "2001-10-25", "2001-10-26", "2001-10-27", "2001-10-28", "2001-10-29", "2001-10-30", "2001-10-31", "2001-11-01", "2001-11-02", "2001-11-03", "2001-11-04", "2001-11-05", "2001-11-06", "2001-11-07", "2001-11-08", "2001-11-09", "2001-11-10", "2001-11-11", "2001-11-12", "2001-11-13", "2001-11-14", "2001-11-15", "2001-11-16", "2001-11-17", "2001-11-18", "2001-11-19", "2001-11-20", "2001-11-21", "2001-11-22", "2001-11-23", "2001-11-24", "2001-11-25", "2001-11-26", "2001-11-27", "2001-11-28", "2001-11-29", "2001-11-30", "2001-12-01", "2001-12-02", "2001-12-03", "2001-12-04", "2001-12-05", "2001-12-06", "2001-12-07", "2001-12-08", "2001-12-09", "2001-12-10", "2001-12-11", "2001-12-12", "2001-12-13", "2001-12-14", "2001-12-15", "2001-12-16", "2001-12-17", "2001-12-18", "2001-12-19", "2001-12-20", "2001-12-21", "2001-12-22", "2001-12-23", "2001-12-24", "2001-12-25", "2001-12-26", "2001-12-27", "2001-12-28", "2001-12-29", "2001-12-30", "2001-12-31" })]
  public void YearConvertToDate(short _year, string _start, string _end, IEnumerable<string> _expect)
  {
    var model = new ModelDayOffExpression { Year = _year, Reason = "", Off = true, AuthorID = "" };
    var start = DateOnly.Parse(_start);
    var end = DateOnly.Parse(_end);
    var expect = _expect.Select(DateOnly.Parse);

    var result = ConvertDayOffExpression.ConvertToDates(model, start, end);

    Assert.Equal(expect.Count(), result.Count);
    Assert.True(expect.All(result.Contains));
  }

  [Theory]
  [InlineData(00, "2000-01-01", "2000-02-01", new string[] { })]
  [InlineData(00, "2000-01-01", "2030-12-31", new[] { "2000-04-23", "2001-04-15", "2002-03-31", "2003-04-20", "2004-04-11", "2005-03-27", "2006-04-16", "2007-04-08", "2008-03-23", "2009-04-12", "2010-04-04", "2011-04-24", "2012-04-08", "2013-03-31", "2014-04-20", "2015-04-05", "2016-03-27", "2017-04-16", "2018-04-01", "2019-04-21", "2020-04-12", "2021-04-04", "2022-04-17", "2023-04-09", "2024-03-31", "2025-04-20", "2026-04-05", "2027-03-28", "2028-04-16", "2029-04-01", "2030-04-21" })]
  [InlineData(20, "2000-01-01", "2030-12-31", new[] { "2000-05-13", "2001-05-05", "2002-04-20", "2003-05-10", "2004-05-01", "2005-04-16", "2006-05-06", "2007-04-28", "2008-04-12", "2009-05-02", "2010-04-24", "2011-05-14", "2012-04-28", "2013-04-20", "2014-05-10", "2015-04-25", "2016-04-16", "2017-05-06", "2018-04-21", "2019-05-11", "2020-05-02", "2021-04-24", "2022-05-07", "2023-04-29", "2024-04-20", "2025-05-10", "2026-04-25", "2027-04-17", "2028-05-06", "2029-04-21", "2030-05-11" })]
  [InlineData(20, "2000-06-01", "2030-05-01", new[] { "2001-05-05", "2002-04-20", "2003-05-10", "2004-05-01", "2005-04-16", "2006-05-06", "2007-04-28", "2008-04-12", "2009-05-02", "2010-04-24", "2011-05-14", "2012-04-28", "2013-04-20", "2014-05-10", "2015-04-25", "2016-04-16", "2017-05-06", "2018-04-21", "2019-05-11", "2020-05-02", "2021-04-24", "2022-05-07", "2023-04-29", "2024-04-20", "2025-05-10", "2026-04-25", "2027-04-17", "2028-05-06", "2029-04-21" })]
  public void EasterConvertToDate(byte _day, string _start, string _end, IEnumerable<string> _expect)
  {
    var model = new ModelDayOffExpression { DaysAfterEaster = _day, Reason = "", Off = true, AuthorID = "" };
    var start = DateOnly.Parse(_start);
    var end = DateOnly.Parse(_end);
    var expect = _expect.Select(DateOnly.Parse);

    var result = ConvertDayOffExpression.ConvertToDates(model, start, end);

    Assert.Equal(expect.Count(), result.Count);
    Assert.True(expect.All(result.Contains));
  }

  [Theory]
  [InlineData(1, EnumMonth.February, "2000-01-01", "2000-01-05", new string[] { })]
  [InlineData(1, EnumMonth.February, "2000-03-01", "2005-02-05", new string[] { "2001-02-01", "2002-02-01", "2003-02-01", "2004-02-01", "2005-02-01" })]
  public void MonthAndDay(byte _day, EnumMonth _month, string _start, string _end, IEnumerable<string> _expect)
  {
    var model = new ModelDayOffExpression { Day = _day, Month = _month, Reason = "", Off = true, AuthorID = "" };
    var start = DateOnly.Parse(_start);
    var end = DateOnly.Parse(_end);
    var expect = _expect.Select(DateOnly.Parse);

    var result = ConvertDayOffExpression.ConvertToDates(model, start, end);

    Assert.Equal(expect.Count(), result.Count);
    Assert.True(expect.All(result.Contains));
  }
}