networks:
  app-network:
    driver: bridge

services:
  server-release:
    build:
      context: ./Server
      dockerfile: dockerfile
      target: server-release
      args:
        - BUILD_CONFIGURATION=release
        - ASPNETCORE_ENVIRONMENT=Production
    container_name: server-release
    image: server-release
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DB_PASSWORD="${DB_PASSWORD:-zaq1@WSX}"
    depends_on:
      - db
      - html-release
    ports:
      - "80:8080"
      - "443:8081"
    networks:
      - app-network
    volumes:
      - ./DB/images:/Server/wwwroot/images/

  html-release:
    build:
      context: ./HTML
      dockerfile: dockerfile
      target: html-release
    container_name: html-release
    image: html-release

  initialize-db-release:
    build:
      context: ./Server
      dockerfile: dockerfile
      target: server-update-db
      args:
        - BUILD_CONFIGURATION=release
        - ASPNETCORE_ENVIRONMENT=Production
    container_name: initialize-db-release
    image: initialize-db-release
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DB_PASSWORD="${DB_PASSWORD:-zaq1@WSX}"
    depends_on:
      - db
    networks:
      - app-network
    volumes:
      - ./DB/Migrations/:/Server/Migrations/       

  server-development:
    build:
      context: ./Server
      dockerfile: dockerfile
      target: server-development
      args:
        - BUILD_CONFIGURATION=debug
        - ASPNETCORE_ENVIRONMENT=Development
    container_name: server-development
    stdin_open: true
    tty: true
    image: server-development
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_PASSWORD="${DB_PASSWORD:-zaq1@WSX}"
    depends_on:
      - db
      - html-development
    ports:
      - "80:8080"
      - "443:8081"
    networks:
      - app-network
    volumes:
      - type: bind 
        source: ./Server/Server.csproj
        target: /Server/Server.csproj
      - type: bind 
        source: ./Server/Program.cs
        target: /Server/Program.cs
      - type: bind 
        source: ./Server/globals.cs
        target: /Server/globals.cs
      - type: bind 
        source: ./Server/appsettings.json
        target: /Server/appsettings.json
      - ./Server/wwwroot/:/Server/wwwroot
      - ./Server/Service/:/Server/Service
      - ./Server/EndPoint/:/Server/EndPoint
    cpus: '1'
    mem_limit: '1g'

  html-development:
    build:
      context: ./HTML
      dockerfile: dockerfile
      target: html-development
    container_name: html-development
    image: html-development
    ports:
      - "3000:3000"
    networks:
      - app-network
    volumes:
      - ./HTML/:/html/
    cpus: '0.25'
    mem_limit: '1g'

  initialize-db-development:
    build:
      context: ./Server
      dockerfile: dockerfile
      target: server-update-db
      args:
        - BUILD_CONFIGURATION=debug
        - ASPNETCORE_ENVIRONMENT=Development
    container_name: initialize-db-debug
    image: initialize-db-debug
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_PASSWORD="${DB_PASSWORD:-zaq1@WSX}"
    depends_on:
      - db
    networks:
      - app-network
    volumes:
      - ./DB/Migrations/:/Server/Migrations/

  db:
    build:
      context: ./DB
      dockerfile: dockerfile
      target: db-base
    container_name: db
    image: db
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD:-zaq1@WSX}"
      MSSQL_PID: "Express"
      MSSQL_MEMORY_LIMIT_MB: "4096"
      MSSQL_MIN_MEMORY_MB: "2048"
      MSSQL_MAXDOP: "4"
      MSSQL_WORKER_THREADS: "64"
      MSSQL_TCP_PORT: "1433"
      MSSQL_BACKUP_DIR: "/var/opt/mssql/backup"
      MSSQL_AUTO_UPDATE_STATISTICS_ASYNC: "ON"
      MSSQL_QUERY_OPTIMIZER_HOTFIXES: "ON"
      MSSQL_TRACEFLAGS: "4199"
    user: "10001:10001"
    ports:
      - "1433:1433"
    networks:
      - app-network
    volumes:
      - ./DB/log/:/var/opt/mssql/log
      - ./DB/data/:/var/opt/mssql/data
      - ./DB/secrets/:/var/opt/mssql/secrets 