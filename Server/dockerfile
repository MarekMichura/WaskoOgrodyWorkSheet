# install tools for server
FROM mcr.microsoft.com/dotnet/sdk:latest AS server-with-debugger
RUN apt-get update && apt-get install -y --no-install-recommends curl && apt-get clean
RUN curl -sSL https://aka.ms/getvsdbgsh | bash /dev/stdin -v latest -l /remote_debugger
RUN dotnet tool install --global dotnet-ef

FROM server-with-debugger as server-sdk
WORKDIR /Server/
COPY ["./Server.csproj", "./"]
RUN dotnet restore "Server.csproj"
COPY ["./appsettings.json", "./appsettings.json"]
COPY ["./taskCreateDb.sh", "./taskCreateDb.sh"]
COPY ["./wait-for-it.sh", "./wait-for-it.sh"]
RUN chmod +x taskCreateDb.sh && chmod +x wait-for-it.sh
COPY ["./wwwroot/", "./wwwroot/"]
COPY ["./globals.cs", "./globals.cs"]
COPY ["./Program.cs", "./Program.cs"]
COPY ["./Service/", "./Service/"]
COPY ["./EndPoint/", "./EndPoint/"]

FROM server-sdk AS server-development
EXPOSE 8080
EXPOSE 8081
WORKDIR /Server/
ENTRYPOINT [ "dotnet", "watch", "run" ]

FROM server-sdk AS server-update-db
WORKDIR /Server/
ENTRYPOINT [ "./taskCreateDb.sh" ]

FROM server-sdk AS server-publish
WORKDIR /Server/
RUN dotnet publish "./Server.csproj" -c release -o /Server/publish /p:UseAppHost=false

FROM mcr.microsoft.com/dotnet/aspnet:latest AS server-release
USER app
WORKDIR /Server
COPY --from=server-publish /Server/publish/ .
COPY --from=html-release /html/build ./wwwroot 
ENTRYPOINT ["dotnet", "Server.dll"]