// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Wasko.Migrations
{
    [DbContext(typeof(DataBaseConnect))]
    partial class DataBaseConnectModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "43888408-d12c-40d1-a77e-0f720a253bf5",
                            ConcurrencyStamp = "b75c6ab1-e16c-4c76-b4ad-d189d89d0ce3",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "5876a247-de24-4aa2-bee3-a9b28253c7ea",
                            ConcurrencyStamp = "2d7e2141-feac-4486-8950-500d3d0c687d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9810405a-e803-477f-8a28-3d94ee0aa653",
                            ConcurrencyStamp = "3ff8e1b5-ba6b-47b4-bfdf-087ea2ee0312",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5000398a-8ad4-4c1d-aee2-9acac0109b98",
                            RoleId = "43888408-d12c-40d1-a77e-0f720a253bf5"
                        },
                        new
                        {
                            UserId = "5000398a-8ad4-4c1d-aee2-9acac0109b98",
                            RoleId = "5876a247-de24-4aa2-bee3-a9b28253c7ea"
                        },
                        new
                        {
                            UserId = "43c3ae7a-7968-40c0-bc2a-347cce8fe9d1",
                            RoleId = "43888408-d12c-40d1-a77e-0f720a253bf5"
                        },
                        new
                        {
                            UserId = "43c3ae7a-7968-40c0-bc2a-347cce8fe9d1",
                            RoleId = "5876a247-de24-4aa2-bee3-a9b28253c7ea"
                        },
                        new
                        {
                            UserId = "43c3ae7a-7968-40c0-bc2a-347cce8fe9d1",
                            RoleId = "9810405a-e803-477f-8a28-3d94ee0aa653"
                        },
                        new
                        {
                            UserId = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            RoleId = "43888408-d12c-40d1-a77e-0f720a253bf5"
                        },
                        new
                        {
                            UserId = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            RoleId = "43888408-d12c-40d1-a77e-0f720a253bf5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ModelChord", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Chords");

                    b.HasData(
                        new
                        {
                            ID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            Name = "goły korzeń",
                            Price = 1m
                        },
                        new
                        {
                            ID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            Name = "p9/p11/c1,5",
                            Price = 1.1m
                        },
                        new
                        {
                            ID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            Name = "C2",
                            Price = 2m
                        },
                        new
                        {
                            ID = "37decf97-9040-42cf-b635-d520e454db2d",
                            Name = "C3",
                            Price = 2.5m
                        },
                        new
                        {
                            ID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            Name = "C5",
                            Price = 3m
                        });
                });

            modelBuilder.Entity("ModelConstruction", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Constructions");

                    b.HasData(
                        new
                        {
                            ID = "2e16a027-8321-4db0-8cc9-9c01bc7a5a69",
                            Name = "3maja"
                        },
                        new
                        {
                            ID = "5b05350e-f1ba-40fd-8c97-2ad62a9bf629",
                            Name = "Pychowicka"
                        },
                        new
                        {
                            ID = "410733d3-d79c-4a1a-b34d-32a0eef3711c",
                            Name = "Wizjonerów"
                        },
                        new
                        {
                            ID = "83e8f0c6-6a9c-420f-aca5-68e3c0a374a5",
                            Name = "Grzegórzecka"
                        },
                        new
                        {
                            ID = "e2725e3d-7cc9-499d-a9c0-fcbef80696ec",
                            Name = "Tarnów Dach"
                        },
                        new
                        {
                            ID = "05d26d33-5da5-4323-8211-ae55b600b3d0",
                            Name = "Tarnów Eurovia"
                        },
                        new
                        {
                            ID = "92157c02-a679-4b19-bda3-5f3ba926afbe",
                            Name = "Quattro"
                        },
                        new
                        {
                            ID = "2ebe054b-6c33-4d5a-b89b-16c182714344",
                            Name = "Rondo"
                        },
                        new
                        {
                            ID = "e3fef810-5e34-4c65-9d80-114d1771020d",
                            Name = "Narama"
                        },
                        new
                        {
                            ID = "58a4fd37-c099-4cc6-a813-d0518251291d",
                            Name = "Kielce"
                        },
                        new
                        {
                            ID = "50e75690-a906-4dcb-bb6b-6bbd65fa3869",
                            Name = "Piaskowa"
                        },
                        new
                        {
                            ID = "dd855d79-f769-4a08-8fc1-8f53660d6879",
                            Name = "Poleska"
                        },
                        new
                        {
                            ID = "4aa08d74-6644-4289-a28c-03ee366f856f",
                            Name = "Mogilska"
                        },
                        new
                        {
                            ID = "dc74138c-caa0-40f2-a7d6-a3d2f9eeaf9a",
                            Name = "Henniger Graby"
                        },
                        new
                        {
                            ID = "44eed367-fae3-432e-9d62-e6af23e876c0",
                            Name = "klimanowa"
                        });
                });

            modelBuilder.Entity("ModelUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ChangePassword")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5000398a-8ad4-4c1d-aee2-9acac0109b98",
                            ChangePassword = true,
                            ConcurrencyStamp = "3daa8685-dd5b-494d-adb9-9fa7bb4f5a2f",
                            Email = "marekti012@gmail.com",
                            FirstName = "Marek",
                            LastName = "Michura",
                            NormalizedEmail = "MAREKTI012@GMAIL.COM",
                            NormalizedUserName = "MAREK",
                            PasswordHash = "AQAAAAIAAYagAAAAEC38ze0LxoJrTH7aTt4RQnFBq9CMCraeyZwi/R/xlNoGxROGFMLVPsrMUSUqfo3HdQ==",
                            SecurityStamp = "9c95c358-9615-4d11-976b-f2d002573368",
                            UserName = "Marek"
                        },
                        new
                        {
                            Id = "43c3ae7a-7968-40c0-bc2a-347cce8fe9d1",
                            ChangePassword = true,
                            ConcurrencyStamp = "b6f2e9bb-1637-4050-ba36-3bf1612f59f8",
                            Email = "ogrodywasko@gmail.com",
                            FirstName = "Szef",
                            LastName = "Wszystkich szefów",
                            NormalizedEmail = "OGRODYWASKO@GMAIL.COM",
                            NormalizedUserName = "WASKO",
                            PasswordHash = "AQAAAAIAAYagAAAAEOlPTzJ8FPJJhmHaaXae2oJcGtBs/yn+DEJO+73+ZKjBW51h0pLaSyJkG4gEV7+fRA==",
                            SecurityStamp = "13d7e6fc-e9b4-43d2-8eee-c417236f99fa",
                            UserName = "Wasko"
                        },
                        new
                        {
                            Id = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            ChangePassword = true,
                            ConcurrencyStamp = "7eeec36a-6dd7-4328-bbe6-e1ea66ab9a78",
                            Email = "user1@gmail.com",
                            FirstName = "Name",
                            LastName = "LastName",
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAELQIXn1RshxZQ82sKhFMIjXEfNu9AqzJ4q7/SQgCYSkeWzKL2+LLVk+Q3+35Ds7RtQ==",
                            SecurityStamp = "f6e655cb-b265-4ea2-bced-1e6cde785850",
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            ChangePassword = true,
                            ConcurrencyStamp = "2310f81e-ce92-46c0-8193-9a5fb6ce9e8e",
                            Email = "user2@gmail.com",
                            FirstName = "Name",
                            LastName = "LastName",
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEP+bk2PDEFiag6C+zMNgC0ZHoswtQJJ1qTwSPgOoBTIgtTnbO2qv7ORfkrwhZRpAOQ==",
                            SecurityStamp = "e1b92d4d-01fe-4bbb-b809-2149fc7c8fa0",
                            UserName = "User2"
                        });
                });

            modelBuilder.Entity("ModelWorkDay", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Advance")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CashRegister")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConstructionID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID", "Date");

                    b.HasIndex("ConstructionID");

                    b.ToTable("workDays");

                    b.HasData(
                        new
                        {
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 1),
                            Advance = 0m,
                            Bonus = 0m,
                            CashRegister = 0m,
                            Comments = "",
                            ConstructionID = "2e16a027-8321-4db0-8cc9-9c01bc7a5a69",
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 2),
                            Advance = 0m,
                            Bonus = 0m,
                            CashRegister = 0m,
                            Comments = "",
                            ConstructionID = "5b05350e-f1ba-40fd-8c97-2ad62a9bf629",
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 3),
                            Advance = 0m,
                            Bonus = 0m,
                            CashRegister = 0m,
                            Comments = "",
                            ConstructionID = "5b05350e-f1ba-40fd-8c97-2ad62a9bf629",
                            EndTime = new TimeSpan(0, 22, 0, 0, 0),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 4),
                            Advance = 0m,
                            Bonus = 0m,
                            CashRegister = 0m,
                            Comments = "",
                            ConstructionID = "410733d3-d79c-4a1a-b34d-32a0eef3711c",
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            StartTime = new TimeSpan(0, 4, 0, 0, 0)
                        },
                        new
                        {
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 5),
                            Advance = 0m,
                            Bonus = 0m,
                            CashRegister = 0m,
                            Comments = "",
                            ConstructionID = "83e8f0c6-6a9c-420f-aca5-68e3c0a374a5",
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            StartTime = new TimeSpan(0, 4, 0, 0, 0)
                        },
                        new
                        {
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 6),
                            Advance = 0m,
                            Bonus = 0m,
                            CashRegister = 0m,
                            Comments = "",
                            ConstructionID = "2e16a027-8321-4db0-8cc9-9c01bc7a5a69",
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 1),
                            Advance = 0m,
                            Bonus = 0m,
                            CashRegister = 0m,
                            Comments = "",
                            ConstructionID = "05d26d33-5da5-4323-8211-ae55b600b3d0",
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 2),
                            Advance = 0m,
                            Bonus = 0m,
                            CashRegister = 0m,
                            Comments = "",
                            ConstructionID = "05d26d33-5da5-4323-8211-ae55b600b3d0",
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 3),
                            Advance = 0m,
                            Bonus = 0m,
                            CashRegister = 0m,
                            Comments = "",
                            ConstructionID = "05d26d33-5da5-4323-8211-ae55b600b3d0",
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 4),
                            Advance = 0m,
                            Bonus = 0m,
                            CashRegister = 0m,
                            Comments = "",
                            ConstructionID = "05d26d33-5da5-4323-8211-ae55b600b3d0",
                            EndTime = new TimeSpan(0, 21, 0, 0, 0),
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 5),
                            Advance = 0m,
                            Bonus = 0m,
                            CashRegister = 0m,
                            Comments = "",
                            ConstructionID = "05d26d33-5da5-4323-8211-ae55b600b3d0",
                            EndTime = new TimeSpan(0, 23, 0, 0, 0),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 6),
                            Advance = 0m,
                            Bonus = 0m,
                            CashRegister = 0m,
                            Comments = "",
                            ConstructionID = "05d26d33-5da5-4323-8211-ae55b600b3d0",
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("ModelWorkDayChord", b =>
                {
                    b.Property<string>("ChordID")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<long>("Count")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChordID", "UserID", "Date");

                    b.HasIndex("UserID", "Date");

                    b.ToTable("WorkDayChords");

                    b.HasData(
                        new
                        {
                            ChordID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 1),
                            Count = 84L
                        },
                        new
                        {
                            ChordID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 1),
                            Count = 18L
                        },
                        new
                        {
                            ChordID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 1),
                            Count = 73L
                        },
                        new
                        {
                            ChordID = "37decf97-9040-42cf-b635-d520e454db2d",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 1),
                            Count = 15L
                        },
                        new
                        {
                            ChordID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 1),
                            Count = 71L
                        },
                        new
                        {
                            ChordID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 2),
                            Count = 68L
                        },
                        new
                        {
                            ChordID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 2),
                            Count = 19L
                        },
                        new
                        {
                            ChordID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 2),
                            Count = 39L
                        },
                        new
                        {
                            ChordID = "37decf97-9040-42cf-b635-d520e454db2d",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 2),
                            Count = 16L
                        },
                        new
                        {
                            ChordID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 2),
                            Count = 33L
                        },
                        new
                        {
                            ChordID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 3),
                            Count = 19L
                        },
                        new
                        {
                            ChordID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 3),
                            Count = 48L
                        },
                        new
                        {
                            ChordID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 3),
                            Count = 90L
                        },
                        new
                        {
                            ChordID = "37decf97-9040-42cf-b635-d520e454db2d",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 3),
                            Count = 96L
                        },
                        new
                        {
                            ChordID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 3),
                            Count = 54L
                        },
                        new
                        {
                            ChordID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 4),
                            Count = 14L
                        },
                        new
                        {
                            ChordID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 4),
                            Count = 34L
                        },
                        new
                        {
                            ChordID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 4),
                            Count = 72L
                        },
                        new
                        {
                            ChordID = "37decf97-9040-42cf-b635-d520e454db2d",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 4),
                            Count = 35L
                        },
                        new
                        {
                            ChordID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 4),
                            Count = 91L
                        },
                        new
                        {
                            ChordID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 5),
                            Count = 29L
                        },
                        new
                        {
                            ChordID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 5),
                            Count = 18L
                        },
                        new
                        {
                            ChordID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 5),
                            Count = 38L
                        },
                        new
                        {
                            ChordID = "37decf97-9040-42cf-b635-d520e454db2d",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 5),
                            Count = 81L
                        },
                        new
                        {
                            ChordID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 5),
                            Count = 78L
                        },
                        new
                        {
                            ChordID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 6),
                            Count = 4L
                        },
                        new
                        {
                            ChordID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 6),
                            Count = 40L
                        },
                        new
                        {
                            ChordID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 6),
                            Count = 73L
                        },
                        new
                        {
                            ChordID = "37decf97-9040-42cf-b635-d520e454db2d",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 6),
                            Count = 28L
                        },
                        new
                        {
                            ChordID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            UserID = "c437ace0-d9fa-445f-92f2-d6870d0c6e00",
                            Date = new DateOnly(2024, 6, 6),
                            Count = 89L
                        },
                        new
                        {
                            ChordID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 1),
                            Count = 46L
                        },
                        new
                        {
                            ChordID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 1),
                            Count = 46L
                        },
                        new
                        {
                            ChordID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 1),
                            Count = 31L
                        },
                        new
                        {
                            ChordID = "37decf97-9040-42cf-b635-d520e454db2d",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 1),
                            Count = 23L
                        },
                        new
                        {
                            ChordID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 1),
                            Count = 37L
                        },
                        new
                        {
                            ChordID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 2),
                            Count = 9L
                        },
                        new
                        {
                            ChordID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 2),
                            Count = 91L
                        },
                        new
                        {
                            ChordID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 2),
                            Count = 85L
                        },
                        new
                        {
                            ChordID = "37decf97-9040-42cf-b635-d520e454db2d",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 2),
                            Count = 22L
                        },
                        new
                        {
                            ChordID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 2),
                            Count = 67L
                        },
                        new
                        {
                            ChordID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 3),
                            Count = 63L
                        },
                        new
                        {
                            ChordID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 3),
                            Count = 78L
                        },
                        new
                        {
                            ChordID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 3),
                            Count = 97L
                        },
                        new
                        {
                            ChordID = "37decf97-9040-42cf-b635-d520e454db2d",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 3),
                            Count = 60L
                        },
                        new
                        {
                            ChordID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 3),
                            Count = 94L
                        },
                        new
                        {
                            ChordID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 4),
                            Count = 40L
                        },
                        new
                        {
                            ChordID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 4),
                            Count = 61L
                        },
                        new
                        {
                            ChordID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 4),
                            Count = 70L
                        },
                        new
                        {
                            ChordID = "37decf97-9040-42cf-b635-d520e454db2d",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 4),
                            Count = 31L
                        },
                        new
                        {
                            ChordID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 4),
                            Count = 34L
                        },
                        new
                        {
                            ChordID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 5),
                            Count = 0L
                        },
                        new
                        {
                            ChordID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 5),
                            Count = 16L
                        },
                        new
                        {
                            ChordID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 5),
                            Count = 73L
                        },
                        new
                        {
                            ChordID = "37decf97-9040-42cf-b635-d520e454db2d",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 5),
                            Count = 39L
                        },
                        new
                        {
                            ChordID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 5),
                            Count = 75L
                        },
                        new
                        {
                            ChordID = "4da6c40f-36bb-4a03-9b47-4f6553efe7e7",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 6),
                            Count = 64L
                        },
                        new
                        {
                            ChordID = "f5ca123a-3ec4-4f2c-bbf7-f52124410676",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 6),
                            Count = 40L
                        },
                        new
                        {
                            ChordID = "ab158d3c-c1d2-4562-b1b7-852a00364300",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 6),
                            Count = 27L
                        },
                        new
                        {
                            ChordID = "37decf97-9040-42cf-b635-d520e454db2d",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 6),
                            Count = 34L
                        },
                        new
                        {
                            ChordID = "c94d4f50-2b24-4724-8d10-58444186bfa8",
                            UserID = "c4c76d24-b833-4635-b1ad-95e8999e309a",
                            Date = new DateOnly(2024, 6, 6),
                            Count = 53L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ModelUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ModelUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ModelUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelWorkDay", b =>
                {
                    b.HasOne("ModelConstruction", "Construction")
                        .WithMany("WorkDays")
                        .HasForeignKey("ConstructionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelUser", "User")
                        .WithMany("WorkDays")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Construction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModelWorkDayChord", b =>
                {
                    b.HasOne("ModelChord", "Chord")
                        .WithMany("WorkDayChords")
                        .HasForeignKey("ChordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelWorkDay", "WorkDay")
                        .WithMany("WorkDayChords")
                        .HasForeignKey("UserID", "Date")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chord");

                    b.Navigation("WorkDay");
                });

            modelBuilder.Entity("ModelChord", b =>
                {
                    b.Navigation("WorkDayChords");
                });

            modelBuilder.Entity("ModelConstruction", b =>
                {
                    b.Navigation("WorkDays");
                });

            modelBuilder.Entity("ModelUser", b =>
                {
                    b.Navigation("WorkDays");
                });

            modelBuilder.Entity("ModelWorkDay", b =>
                {
                    b.Navigation("WorkDayChords");
                });
#pragma warning restore 612, 618
        }
    }
}
