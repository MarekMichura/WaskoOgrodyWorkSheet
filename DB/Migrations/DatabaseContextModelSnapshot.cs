// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wasko;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "26453523-4cb2-448a-90d4-663072a57ecc",
                            RoleId = "38dcacea-ee73-4c98-bc7b-cfba196ccab5"
                        },
                        new
                        {
                            UserId = "26453523-4cb2-448a-90d4-663072a57ecc",
                            RoleId = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4"
                        },
                        new
                        {
                            UserId = "26453523-4cb2-448a-90d4-663072a57ecc",
                            RoleId = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            UserId = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            RoleId = "38dcacea-ee73-4c98-bc7b-cfba196ccab5"
                        },
                        new
                        {
                            UserId = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            RoleId = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4"
                        },
                        new
                        {
                            UserId = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            RoleId = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            UserId = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            RoleId = "38dcacea-ee73-4c98-bc7b-cfba196ccab5"
                        },
                        new
                        {
                            UserId = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            RoleId = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4"
                        },
                        new
                        {
                            UserId = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            RoleId = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            UserId = "68553cdf-0a20-4969-9693-c49315c7df58",
                            RoleId = "38dcacea-ee73-4c98-bc7b-cfba196ccab5"
                        },
                        new
                        {
                            UserId = "68553cdf-0a20-4969-9693-c49315c7df58",
                            RoleId = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4"
                        },
                        new
                        {
                            UserId = "68553cdf-0a20-4969-9693-c49315c7df58",
                            RoleId = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Wasko.ModelBonus", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("ApproverID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("money");

                    b.Property<string>("BonusDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BonusRejectionReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatorID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("TargetID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ID");

                    b.HasIndex("ApproverID");

                    b.HasIndex("CreatorID");

                    b.HasIndex("TargetID");

                    b.ToTable("Bonus");

                    b.HasData(
                        new
                        {
                            ID = "5a744293-575a-44b5-83bd-91818e8924a4",
                            Bonus = 100m,
                            BonusDescription = "Za prace w sobote",
                            CreatorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 10, 4),
                            TargetID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9"
                        },
                        new
                        {
                            ID = "b055128e-a98a-421d-98d5-0ca059552457",
                            Bonus = 50m,
                            BonusDescription = "Za prace w sobote",
                            CreatorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 10, 4),
                            TargetID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f"
                        },
                        new
                        {
                            ID = "66b3fdf2-ebcc-4bc7-8626-ae8c8941cf0b",
                            Bonus = 10m,
                            BonusDescription = "Za bycie kierowca",
                            CreatorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 10, 4),
                            TargetID = "68553cdf-0a20-4969-9693-c49315c7df58"
                        });
                });

            modelBuilder.Entity("Wasko.ModelChord", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("NewId()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatorID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CreatorID");

                    b.ToTable("Chords");

                    b.HasData(
                        new
                        {
                            ID = "7b989a90-b2a4-4514-9020-756501c7061d",
                            Active = true,
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Name = "Goły korzeń"
                        },
                        new
                        {
                            ID = "6b5f2ead-4357-482f-9022-e5eb02822313",
                            Active = true,
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Name = "p9"
                        },
                        new
                        {
                            ID = "7dd19798-98d4-4411-9c21-8fe1e2212e8a",
                            Active = true,
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Name = "p11"
                        },
                        new
                        {
                            ID = "4c1dadaa-8d6a-4a02-99db-aeca64fdc0bf",
                            Active = true,
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Name = "c1,5"
                        },
                        new
                        {
                            ID = "c92154e8-e9b9-4379-89db-23fdb7eef1e7",
                            Active = true,
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Name = "C2"
                        },
                        new
                        {
                            ID = "34929715-6e9b-4ebd-bdb7-591fa7bfc1dc",
                            Active = true,
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Name = "C3"
                        },
                        new
                        {
                            ID = "bd13c6b0-8e2c-4048-a42c-a843d8581466",
                            Active = true,
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Name = "C5"
                        },
                        new
                        {
                            ID = "68c97d5f-b6b1-457c-addd-100873004b9d",
                            Active = true,
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Name = "C9"
                        },
                        new
                        {
                            ID = "d386701e-18cd-4cfc-ab3e-5d0750266bd7",
                            Active = true,
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Name = "Rozchodniki"
                        },
                        new
                        {
                            ID = "4a445a6a-07cf-490a-b1d4-37364ad15e4d",
                            Active = true,
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Name = "Drzewa 16-18"
                        },
                        new
                        {
                            ID = "b7e7da00-6c48-4bb0-8399-fe44f33d94e4",
                            Active = true,
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Name = "Drzewa 18-20"
                        });
                });

            modelBuilder.Entity("Wasko.ModelChordPrice", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("ChordID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatorID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("ID");

                    b.HasIndex("ChordID");

                    b.HasIndex("CreatorID");

                    b.ToTable("ChordPrices");

                    b.HasData(
                        new
                        {
                            ID = "e2f11f1f-ed0a-4007-97a2-f3ba1ee78150",
                            ChordID = "7b989a90-b2a4-4514-9020-756501c7061d",
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Date = new DateOnly(2000, 1, 1),
                            Price = 1m
                        },
                        new
                        {
                            ID = "6d743df0-601f-481b-bafe-7bd70f0212b0",
                            ChordID = "6b5f2ead-4357-482f-9022-e5eb02822313",
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Date = new DateOnly(2000, 1, 1),
                            Price = 1.1m
                        },
                        new
                        {
                            ID = "17deb4e8-8a65-47b9-9b24-4717049a46b5",
                            ChordID = "7dd19798-98d4-4411-9c21-8fe1e2212e8a",
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Date = new DateOnly(2000, 1, 1),
                            Price = 1.1m
                        },
                        new
                        {
                            ID = "ed53c2cf-a9f4-419b-9711-40cda1920588",
                            ChordID = "4c1dadaa-8d6a-4a02-99db-aeca64fdc0bf",
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Date = new DateOnly(2000, 1, 1),
                            Price = 1.1m
                        },
                        new
                        {
                            ID = "03d72c0a-8769-4c9e-852e-7f8abee42fa6",
                            ChordID = "c92154e8-e9b9-4379-89db-23fdb7eef1e7",
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Date = new DateOnly(2000, 1, 1),
                            Price = 2m
                        },
                        new
                        {
                            ID = "30ec8d82-eeb4-4bbd-ab8c-97234a8b3436",
                            ChordID = "34929715-6e9b-4ebd-bdb7-591fa7bfc1dc",
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Date = new DateOnly(2000, 1, 1),
                            Price = 2.5m
                        },
                        new
                        {
                            ID = "c0bc0799-67f2-48c6-a341-ec6664d86b9e",
                            ChordID = "bd13c6b0-8e2c-4048-a42c-a843d8581466",
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Date = new DateOnly(2000, 1, 1),
                            Price = 3m
                        },
                        new
                        {
                            ID = "7f7fa0d4-cc4c-46a6-a89b-a1806018f99c",
                            ChordID = "d386701e-18cd-4cfc-ab3e-5d0750266bd7",
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Date = new DateOnly(2000, 1, 1),
                            Price = 0.2m
                        },
                        new
                        {
                            ID = "6ac1359a-8db5-4bb3-8bf6-1939e3b76d3f",
                            ChordID = "4a445a6a-07cf-490a-b1d4-37364ad15e4d",
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Date = new DateOnly(2000, 1, 1),
                            Price = 35m
                        },
                        new
                        {
                            ID = "4b875b61-1fe5-4d80-b8ac-025f525f76dd",
                            ChordID = "b7e7da00-6c48-4bb0-8399-fe44f33d94e4",
                            CreatorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Date = new DateOnly(2000, 1, 1),
                            Price = 50m
                        });
                });

            modelBuilder.Entity("Wasko.ModelDayOffDate", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("ApproverID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("Off")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StopActive")
                        .HasColumnType("date");

                    b.HasKey("ID");

                    b.HasIndex("ApproverID");

                    b.HasIndex("AuthorID");

                    b.ToTable("DayOffDates");

                    b.HasData(
                        new
                        {
                            ID = "0e3f76fc-7878-44e2-acf3-8f8a262ace1c",
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Off = true,
                            Reason = "Niezaplanowana nieobecność",
                            StartDate = new DateOnly(2024, 6, 24)
                        },
                        new
                        {
                            ID = "fb981f9c-f565-49b6-a126-881d7d706f59",
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Off = true,
                            Reason = "Niezaplanowana nieobecność",
                            StartDate = new DateOnly(2024, 6, 7)
                        },
                        new
                        {
                            ID = "c8011577-6247-419b-8695-1f8278c3c180",
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Off = true,
                            Reason = "Niezaplanowana nieobecność",
                            StartDate = new DateOnly(2024, 6, 4)
                        },
                        new
                        {
                            ID = "3ee7fe12-ec83-444b-a064-9559eca11ba2",
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Off = true,
                            Reason = "Niezaplanowana nieobecność",
                            StartDate = new DateOnly(2024, 6, 25)
                        },
                        new
                        {
                            ID = "c2b5dea3-85fc-469e-a265-088a7feb2172",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            EndDate = new DateOnly(2024, 7, 10),
                            Off = true,
                            Reason = "Wolne z powodu widzi mi się autora",
                            StartDate = new DateOnly(2024, 7, 1)
                        });
                });

            modelBuilder.Entity("Wasko.ModelDayOffDateTargetRole", b =>
                {
                    b.Property<string>("DayOffID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TargetID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("DayOffID", "TargetID");

                    b.HasIndex("TargetID");

                    b.ToTable("DayOffDatesTargetUser");

                    b.HasData(
                        new
                        {
                            DayOffID = "c2b5dea3-85fc-469e-a265-088a7feb2172",
                            TargetID = "38dcacea-ee73-4c98-bc7b-cfba196ccab5"
                        });
                });

            modelBuilder.Entity("Wasko.ModelDayOffDateTargetUser", b =>
                {
                    b.Property<string>("DayOffID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TargetID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("DayOffID", "TargetID");

                    b.HasIndex("TargetID");

                    b.ToTable("DayOffDatesTargetRole");

                    b.HasData(
                        new
                        {
                            DayOffID = "0e3f76fc-7878-44e2-acf3-8f8a262ace1c",
                            TargetID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9"
                        },
                        new
                        {
                            DayOffID = "3ee7fe12-ec83-444b-a064-9559eca11ba2",
                            TargetID = "68553cdf-0a20-4969-9693-c49315c7df58"
                        },
                        new
                        {
                            DayOffID = "c8011577-6247-419b-8695-1f8278c3c180",
                            TargetID = "68553cdf-0a20-4969-9693-c49315c7df58"
                        },
                        new
                        {
                            DayOffID = "fb981f9c-f565-49b6-a126-881d7d706f59",
                            TargetID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f"
                        });
                });

            modelBuilder.Entity("Wasko.ModelDayOffExpression", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("ApproverID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<byte?>("Day")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("DayOfWeek")
                        .HasColumnType("tinyint");

                    b.Property<short?>("DaysAfterEaster")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Month")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Off")
                        .HasColumnType("bit");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("StopActive")
                        .HasColumnType("date");

                    b.Property<short?>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("ID");

                    b.HasIndex("ApproverID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("Order");

                    b.ToTable("DayOffExpression");

                    b.HasData(
                        new
                        {
                            ID = "1ba70b58-d25d-4837-9661-369513254cb2",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            DayOfWeek = (byte)6,
                            Off = true,
                            Order = (byte)1,
                            Reason = "Wolne soboty"
                        },
                        new
                        {
                            ID = "ceac62d2-f2e4-4a75-b2f0-6d27c2034e2f",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            DayOfWeek = (byte)0,
                            Off = true,
                            Order = (byte)1,
                            Reason = "Wolne niedziele"
                        },
                        new
                        {
                            ID = "c73896be-a7c6-40e4-bd0c-2bf861229466",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Day = (byte)1,
                            Month = (byte)1,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Nowy rok"
                        },
                        new
                        {
                            ID = "1989fd11-07a0-496c-820d-cb78d06722a5",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Day = (byte)6,
                            Month = (byte)1,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Trzech Króli"
                        },
                        new
                        {
                            ID = "7dd7ab24-4108-4365-bed5-317ebee2243d",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Day = (byte)1,
                            Month = (byte)5,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Święto pracy"
                        },
                        new
                        {
                            ID = "9caccdfa-bf74-42cd-afa8-13cfda695999",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Day = (byte)3,
                            Month = (byte)5,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Święto konstytucji"
                        },
                        new
                        {
                            ID = "3c1e3bae-7e41-40fe-afef-930d8a91dbed",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Day = (byte)15,
                            Month = (byte)8,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Wniebowzięcie Najświętszej Maryi Panny"
                        },
                        new
                        {
                            ID = "ad3be738-bd43-4b68-a769-1fb75c20f03f",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Day = (byte)1,
                            Month = (byte)11,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Wszystkich świętych"
                        },
                        new
                        {
                            ID = "878b8028-eeb7-4ad9-b018-d37f914f1324",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Day = (byte)11,
                            Month = (byte)11,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Święto Niepodległości"
                        },
                        new
                        {
                            ID = "4f072e47-9eef-4a3d-859b-f350e5c7c115",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Day = (byte)25,
                            Month = (byte)12,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Boże narodzenie, dzień pierwszy"
                        },
                        new
                        {
                            ID = "261d4eed-273d-4127-a49a-ea0201318421",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Day = (byte)26,
                            Month = (byte)12,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Boże narodzenie, dzień drugi"
                        },
                        new
                        {
                            ID = "d08fc9d8-be2a-4b41-9690-9d25ac42bbb2",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            DaysAfterEaster = (short)0,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Wielkanoc"
                        },
                        new
                        {
                            ID = "9269fc85-b704-4cb8-a02e-0ca0999b95f6",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            DaysAfterEaster = (short)1,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Poniedziałek wielkanocny"
                        },
                        new
                        {
                            ID = "6b8ba2b0-f4fb-4370-945c-3da1394ce55e",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            DaysAfterEaster = (short)49,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Zielone Świątki"
                        },
                        new
                        {
                            ID = "168416f7-c582-4c95-a336-13e477abace7",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            DaysAfterEaster = (short)60,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Boże Ciało"
                        },
                        new
                        {
                            ID = "324359d6-af00-4baf-bd61-afa615ed76b9",
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Month = (byte)10,
                            Off = true,
                            Order = (byte)128,
                            Reason = "Wolne dla najlepszego pracownika"
                        });
                });

            modelBuilder.Entity("Wasko.ModelDayOffExpressionTargetRole", b =>
                {
                    b.Property<string>("DayOffID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TargetID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("DayOffID", "TargetID");

                    b.HasIndex("TargetID");

                    b.ToTable("DayOffExpressionTargetUser");

                    b.HasData(
                        new
                        {
                            DayOffID = "1ba70b58-d25d-4837-9661-369513254cb2",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "ceac62d2-f2e4-4a75-b2f0-6d27c2034e2f",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "c73896be-a7c6-40e4-bd0c-2bf861229466",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "1989fd11-07a0-496c-820d-cb78d06722a5",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "7dd7ab24-4108-4365-bed5-317ebee2243d",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "9caccdfa-bf74-42cd-afa8-13cfda695999",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "3c1e3bae-7e41-40fe-afef-930d8a91dbed",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "ad3be738-bd43-4b68-a769-1fb75c20f03f",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "878b8028-eeb7-4ad9-b018-d37f914f1324",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "4f072e47-9eef-4a3d-859b-f350e5c7c115",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "261d4eed-273d-4127-a49a-ea0201318421",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "d08fc9d8-be2a-4b41-9690-9d25ac42bbb2",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "9269fc85-b704-4cb8-a02e-0ca0999b95f6",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "6b8ba2b0-f4fb-4370-945c-3da1394ce55e",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        },
                        new
                        {
                            DayOffID = "168416f7-c582-4c95-a336-13e477abace7",
                            TargetID = "1d923116-d460-4809-b8d8-47d1c4216b2c"
                        });
                });

            modelBuilder.Entity("Wasko.ModelDayOffExpressionTargetUser", b =>
                {
                    b.Property<string>("DayOffID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TargetID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("DayOffID", "TargetID");

                    b.HasIndex("TargetID");

                    b.ToTable("DayOffExpressionTargetRole");

                    b.HasData(
                        new
                        {
                            DayOffID = "324359d6-af00-4baf-bd61-afa615ed76b9",
                            TargetID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9"
                        });
                });

            modelBuilder.Entity("Wasko.ModelFound", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("ApproverID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatorID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("FoundDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FoundRejectionReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Founded")
                        .HasColumnType("money");

                    b.Property<string>("TargetID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ID");

                    b.HasIndex("ApproverID");

                    b.HasIndex("CreatorID");

                    b.HasIndex("TargetID");

                    b.ToTable("Founds");

                    b.HasData(
                        new
                        {
                            ID = "906c1da0-983d-4554-b960-057665a77766",
                            CreatorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 5),
                            FoundDescription = "Nie podane",
                            Founded = 70m,
                            TargetID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9"
                        },
                        new
                        {
                            ID = "5e594928-3c8e-4311-b3a9-9b8631ec2973",
                            CreatorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 15),
                            FoundDescription = "Nie podane",
                            Founded = 24m,
                            TargetID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9"
                        },
                        new
                        {
                            ID = "1a01e30c-c5df-483d-af05-79e181797407",
                            CreatorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 28),
                            FoundDescription = "Nie podane",
                            Founded = 20m,
                            TargetID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9"
                        },
                        new
                        {
                            ID = "ce36031b-1e97-47a1-b276-aa287757195e",
                            CreatorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 3),
                            FoundDescription = "Nie podane",
                            Founded = 120m,
                            TargetID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f"
                        },
                        new
                        {
                            ID = "b0365983-d5d0-4d56-995a-8c5c06e90d45",
                            CreatorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 18),
                            FoundDescription = "voda",
                            Founded = 30m,
                            TargetID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f"
                        },
                        new
                        {
                            ID = "2f2c1ee4-cf09-4ba2-ae77-72245aa5351e",
                            CreatorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 19),
                            FoundDescription = "drzewa",
                            Founded = 80m,
                            TargetID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f"
                        },
                        new
                        {
                            ID = "07e2e81a-a2b1-4dcf-8bf5-1605e6e3a04a",
                            CreatorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 21),
                            FoundDescription = "voda",
                            Founded = 15m,
                            TargetID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f"
                        },
                        new
                        {
                            ID = "dc51017b-be23-4634-a021-59795fbdfa75",
                            CreatorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 24),
                            FoundDescription = "rozhodnik",
                            Founded = 864m,
                            TargetID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f"
                        },
                        new
                        {
                            ID = "a3c1dd56-7e58-4200-ab5f-e23e83dc8df2",
                            CreatorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 21),
                            FoundDescription = "sadzenie",
                            Founded = 92m,
                            TargetID = "68553cdf-0a20-4969-9693-c49315c7df58"
                        });
                });

            modelBuilder.Entity("Wasko.ModelLastActualization", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("LastActualizations");
                });

            modelBuilder.Entity("Wasko.ModelNotification", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetID")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<short>("TemplateName")
                        .HasColumnType("smallint");

                    b.HasKey("ID");

                    b.HasIndex("TargetID");

                    b.ToTable("ModelNotification");
                });

            modelBuilder.Entity("Wasko.ModelProfil", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateOnly>("WorkStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ID");

                    b.ToTable("ModelProfil");

                    b.HasData(
                        new
                        {
                            ID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            FirstName = "Marek",
                            LastName = "Michura",
                            ProfileImage = new byte[0],
                            WorkStartDate = new DateOnly(2000, 1, 1)
                        },
                        new
                        {
                            ID = "26453523-4cb2-448a-90d4-663072a57ecc",
                            FirstName = "User",
                            LastName = "test",
                            ProfileImage = new byte[0],
                            WorkStartDate = new DateOnly(2024, 8, 1)
                        },
                        new
                        {
                            ID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            FirstName = "Eryk",
                            LastName = "IDK",
                            ProfileImage = new byte[0],
                            WorkStartDate = new DateOnly(2024, 8, 1)
                        },
                        new
                        {
                            ID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            FirstName = "Loszka",
                            LastName = "IDK",
                            ProfileImage = new byte[0],
                            WorkStartDate = new DateOnly(2024, 8, 1)
                        },
                        new
                        {
                            ID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            FirstName = "Dima",
                            LastName = "IDK",
                            ProfileImage = new byte[0],
                            WorkStartDate = new DateOnly(2024, 8, 1)
                        });
                });

            modelBuilder.Entity("Wasko.ModelRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TitleStrength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "264462d7-74f0-45c3-bcf2-7ad0741e7676",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            ConcurrencyStamp = "ba1ebb79-f766-483d-8e5d-90f5d2b56357",
                            Name = "Block_employer_day_off",
                            NormalizedName = "BLOCK_EMPLOYER_DAY_OFF",
                            TitleStrength = 0
                        },
                        new
                        {
                            Id = "8962bf18-a454-4c90-a7f8-0927ddb6d7e5",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            ConcurrencyStamp = "46cdeb6e-6bff-4b0b-a4cc-b6b8c9a4e88c",
                            Name = "Block_employer_bonus",
                            NormalizedName = "BLOCK_EMPLOYER_BONUS",
                            TitleStrength = 0
                        },
                        new
                        {
                            Id = "144d7ab4-8c81-4c03-98a8-4f6beb754a65",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            ConcurrencyStamp = "d8dc27ed-3111-45d2-acb5-788c2205696d",
                            Name = "Block_employer_found",
                            NormalizedName = "BLOCK_EMPLOYER_FOUND",
                            TitleStrength = 0
                        },
                        new
                        {
                            Id = "38dcacea-ee73-4c98-bc7b-cfba196ccab5",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            ConcurrencyStamp = "18dced7c-5513-4914-b6aa-186bcc57e973",
                            Name = "Employer",
                            NormalizedName = "EMPLOYER",
                            TitleStrength = 1
                        },
                        new
                        {
                            Id = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            ConcurrencyStamp = "ed543742-e2ab-442b-9b53-20a8c2c3b518",
                            Name = "Gardener",
                            NormalizedName = "GARDENER",
                            TitleStrength = 2
                        },
                        new
                        {
                            Id = "1d923116-d460-4809-b8d8-47d1c4216b2c",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            ConcurrencyStamp = "ef0f6972-d8f3-471d-9cf4-eff5fed3c02d",
                            Name = "Polish_holidays",
                            NormalizedName = "POLISH_HOLIDAYS",
                            TitleStrength = 0
                        });
                });

            modelBuilder.Entity("Wasko.ModelUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(84)
                        .HasColumnType("nvarchar(84)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Active = false,
                            ConcurrencyStamp = "80c9f42b-f53c-46b8-bc23-8b36d0a87808",
                            Email = "marekti012@gmail.com",
                            EmailConfirmed = false,
                            NormalizedEmail = "MAREKTI012@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMrAbv1Rt0uYW9kRsnpAb+Ann3BsI+IoP/clGuoMpxTvKH+SMjEjFSw2eFmxqBLDBQ==",
                            SecurityStamp = "f37cd9b2-b35e-4fd5-bbdb-ede3c60f7f09",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "26453523-4cb2-448a-90d4-663072a57ecc",
                            Active = false,
                            ConcurrencyStamp = "15b30608-fbea-4a80-81e9-a5dec6d9a76d",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEInI35xqVlRsmy0NW0xZy/Ly5SPp39seveVgjyqyERNyqnHhYOwPSDAKYBqWrcwv9A==",
                            SecurityStamp = "6ed3c55f-dd15-40f7-885f-451712b96b19",
                            UserName = "user"
                        },
                        new
                        {
                            Id = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Active = true,
                            ConcurrencyStamp = "501e13e2-6635-4849-b903-d21b0476d978",
                            Email = "eryk@gmail.com",
                            EmailConfirmed = false,
                            NormalizedEmail = "ERYK@GMAIL.COM",
                            NormalizedUserName = "ERYK",
                            PasswordHash = "AQAAAAIAAYagAAAAECLzGKjOhoG83+Yag6lBtnhdEQwlFJ0UlQNweUqJ+Q63Kh+ghz2w66O277d9uLbEAA==",
                            SecurityStamp = "76287ccf-889d-4af5-99dd-a2353bfb6152",
                            UserName = "Eryk"
                        },
                        new
                        {
                            Id = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Active = true,
                            ConcurrencyStamp = "5946e931-5f03-40ed-a3b9-61a67907d71f",
                            Email = "loszka@gmail.com",
                            EmailConfirmed = false,
                            NormalizedEmail = "LOSZKA@GMAIL.COM",
                            NormalizedUserName = "LOSZKA",
                            PasswordHash = "AQAAAAIAAYagAAAAEPSEMFfmWi64R4ftk9/5g2knpLZKnUY8qRa7gqBFkydgTmhxXvQSA9vJaOrZh7ReRQ==",
                            SecurityStamp = "0c3fb8b0-6c13-46fd-a889-7754e5642893",
                            UserName = "Loszka"
                        },
                        new
                        {
                            Id = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Active = true,
                            ConcurrencyStamp = "a3b89fe2-c5fe-4031-913c-1c1f693ab68c",
                            Email = "dima@gmail.com",
                            EmailConfirmed = false,
                            NormalizedEmail = "DIMA@GMAIL.COM",
                            NormalizedUserName = "DIMA",
                            PasswordHash = "AQAAAAIAAYagAAAAEFGCXsMXwPGlhlVwSkgHmke3CgQlWTH1WpIvZaN1YpQFYcCQMvQasElByo6VIez29g==",
                            SecurityStamp = "d56ac5b4-6558-4fef-b2b0-16d6908d6ac3",
                            UserName = "Dima"
                        });
                });

            modelBuilder.Entity("Wasko.ModelUserSalary", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ApproverID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal>("HourlySalary")
                        .HasColumnType("money");

                    b.HasKey("ID", "Date");

                    b.HasIndex("ApproverID");

                    b.ToTable("ModelUserSalary");

                    b.HasData(
                        new
                        {
                            ID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 8, 1),
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            HourlySalary = 30m
                        },
                        new
                        {
                            ID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 8, 1),
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            HourlySalary = 30m
                        },
                        new
                        {
                            ID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 8, 1),
                            ApproverID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            HourlySalary = 26m
                        });
                });

            modelBuilder.Entity("Wasko.ModelWorkChord", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("NewId()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ChordID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkHourID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("ChordID");

                    b.HasIndex("WorkHourID");

                    b.ToTable("ModelWorkChord");

                    b.HasData(
                        new
                        {
                            ID = "6eceacfc-367e-4a83-b4bb-2d6f5f34bd0e",
                            Active = true,
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            ChordID = "7b989a90-b2a4-4514-9020-756501c7061d",
                            Date = new DateTime(2024, 10, 4, 14, 11, 41, 268, DateTimeKind.Local).AddTicks(5542),
                            Quantity = 40L,
                            WorkHourID = "1d7cc0a4-9bf2-459d-b015-10ca6e3be617"
                        },
                        new
                        {
                            ID = "3fe7a838-3fb8-4786-9ac8-4df8815e8f8a",
                            Active = true,
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            ChordID = "6b5f2ead-4357-482f-9022-e5eb02822313",
                            Date = new DateTime(2024, 10, 4, 14, 11, 41, 268, DateTimeKind.Local).AddTicks(5616),
                            Quantity = 55L,
                            WorkHourID = "1d7cc0a4-9bf2-459d-b015-10ca6e3be617"
                        },
                        new
                        {
                            ID = "466373cb-2d58-4ccc-91f7-3bde8cbb21bc",
                            Active = true,
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            ChordID = "c92154e8-e9b9-4379-89db-23fdb7eef1e7",
                            Date = new DateTime(2024, 10, 4, 14, 11, 41, 268, DateTimeKind.Local).AddTicks(5627),
                            Quantity = 143L,
                            WorkHourID = "da3170b6-791e-4993-b2bf-6f016f0ac7b9"
                        },
                        new
                        {
                            ID = "f29e2649-1f47-464f-92b7-c1d735b376a7",
                            Active = true,
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            ChordID = "c92154e8-e9b9-4379-89db-23fdb7eef1e7",
                            Date = new DateTime(2024, 10, 4, 14, 11, 41, 268, DateTimeKind.Local).AddTicks(5663),
                            Quantity = 84L,
                            WorkHourID = "22cc8f94-940d-4f3c-9eef-7be9c38b2cde"
                        },
                        new
                        {
                            ID = "71b58aa9-a271-486c-9cda-2deef9c304ee",
                            Active = true,
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            ChordID = "6b5f2ead-4357-482f-9022-e5eb02822313",
                            Date = new DateTime(2024, 10, 4, 14, 11, 41, 268, DateTimeKind.Local).AddTicks(5692),
                            Quantity = 52L,
                            WorkHourID = "22cc8f94-940d-4f3c-9eef-7be9c38b2cde"
                        },
                        new
                        {
                            ID = "cd93ea9d-19fe-4a14-a05f-48b98769036f",
                            Active = true,
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            ChordID = "bd13c6b0-8e2c-4048-a42c-a843d8581466",
                            Date = new DateTime(2024, 10, 4, 14, 11, 41, 268, DateTimeKind.Local).AddTicks(5719),
                            Quantity = 41L,
                            WorkHourID = "22cc8f94-940d-4f3c-9eef-7be9c38b2cde"
                        },
                        new
                        {
                            ID = "6787d4f2-9cfc-4d45-8c6a-deee6e29d0a2",
                            Active = true,
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            ChordID = "c92154e8-e9b9-4379-89db-23fdb7eef1e7",
                            Date = new DateTime(2024, 10, 4, 14, 11, 41, 268, DateTimeKind.Local).AddTicks(5743),
                            Quantity = 39L,
                            WorkHourID = "0aa36bdb-1fec-468b-8331-7e374f24d480"
                        });
                });

            modelBuilder.Entity("Wasko.ModelWorkHour", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("NewId()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<TimeOnly>("WorkEnd")
                        .HasColumnType("time");

                    b.Property<string>("WorkLocationID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<TimeOnly>("WorkStart")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkLocationID");

                    b.ToTable("WorkHours");

                    b.HasData(
                        new
                        {
                            ID = "1d7cc0a4-9bf2-459d-b015-10ca6e3be617",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 178, DateTimeKind.Local).AddTicks(195),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 3),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "fbda133c-eeb6-4b07-a173-3873e87f3767",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "65d8a463-ca86-428f-b1b0-160c6f1dd080",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 181, DateTimeKind.Local).AddTicks(9778),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 4),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(12, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "b509cc46-b0fe-4a93-9686-602b42effe8e",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(136),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 5),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "159230c6-b2a1-425c-bc1f-1adbcc7e35e2",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(149),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 6),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "0006b282-d45d-454e-be1d-bc80937025b0",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(156),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 7),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "31f69f16-3d8f-4327-b40a-21aae4c55cad",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(309),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 10),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "7e5f8d92-32d6-4fec-b39a-7fe9ce3404bb",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(316),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 11),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "c9d06c5d-724a-493b-8501-e7e98fd40a1c",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(320),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 12),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "ee3f3034-8d51-4b11-855b-53ea6cdc97a9",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(325),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 13),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(13, 30, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "efe84007-f0bb-4039-88ed-a5f5c2add6cc",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(332),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 14),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "240106d1-7327-449a-9bf6-01298dea5b22",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(360),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 15),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(13, 30, 0),
                            WorkLocationID = "fbda133c-eeb6-4b07-a173-3873e87f3767",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "324e8a5d-3add-41c8-80ff-26cb8058d498",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(392),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 17),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            ID = "4301ddda-3cdf-4031-8d28-cdcb541682b1",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(397),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 18),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            ID = "c42fc8ff-1c6f-4a2f-9ba8-3e52bdfed7fb",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(402),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 19),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(16, 30, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "c5b94d70-07a2-4bfd-ab75-ac6b6302e7dc",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(406),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 20),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(15, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "9bcfef0a-5b7b-4f35-b993-296061bb8620",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(410),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 21),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(16, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "77a83193-0a81-46e0-a506-06b2169e69a0",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(415),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 25),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(18, 0, 0),
                            WorkLocationID = "8ca4ff43-6da4-490e-ac6e-b493b7054baf",
                            WorkStart = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            ID = "b0402c2b-b931-4eb0-ade1-8cbb2ba332e6",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(719),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 26),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(15, 0, 0),
                            WorkLocationID = "fbda133c-eeb6-4b07-a173-3873e87f3767",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "964d9d0a-920c-4f8a-ae6f-4ec4569f9912",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(729),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 27),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(16, 0, 0),
                            WorkLocationID = "8ca4ff43-6da4-490e-ac6e-b493b7054baf",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "e6733e6d-2852-4269-8739-0d01e4643441",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(734),
                            AuthorID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            Date = new DateOnly(2024, 6, 28),
                            UserID = "ec0f6916-7a14-4dd9-80e9-f20cd09cd6a9",
                            WorkEnd = new TimeOnly(16, 30, 0),
                            WorkLocationID = "cf9220d9-b583-4831-aff4-c7517ff84888",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "0aa36bdb-1fec-468b-8331-7e374f24d480",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(738),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 1),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(14, 30, 0),
                            WorkLocationID = "a5e51680-f19e-4836-926a-ecb947eae937",
                            WorkStart = new TimeOnly(8, 30, 0)
                        },
                        new
                        {
                            ID = "776f6d12-92fe-4c23-a0e7-99b39b1f04b9",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(744),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 3),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "fbda133c-eeb6-4b07-a173-3873e87f3767",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "96fff12b-46da-41d2-aeee-87f1f2c45a04",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(749),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 4),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(14, 0, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "7f5b26a2-3605-4d17-b420-10dc31ac96a0",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(754),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 5),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "da3170b6-791e-4993-b2bf-6f016f0ac7b9",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(759),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 6),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(11, 30, 0),
                            WorkLocationID = "a5e51680-f19e-4836-926a-ecb947eae937",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "d8b690a3-d32a-4aa9-a844-6530dfa632c5",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(763),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 10),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "13c3bc92-dd9b-4b50-b7d7-230d8209b7b5",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(768),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 11),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "43739c45-fa3a-4583-8386-e8d9d4670e2c",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(773),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 12),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "09401924-6e23-4c75-9335-f9a590e76cb5",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(778),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 13),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(13, 30, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "22cc8f94-940d-4f3c-9eef-7be9c38b2cde",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(782),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 14),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(14, 0, 0),
                            WorkLocationID = "fbda133c-eeb6-4b07-a173-3873e87f3767",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "078c0943-842a-4228-851a-c796e595ac7d",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(787),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 15),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(13, 30, 0),
                            WorkLocationID = "fbda133c-eeb6-4b07-a173-3873e87f3767",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "992b861a-ab84-4664-8e14-dc4f14bd9f0a",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(793),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 17),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(8, 30, 0)
                        },
                        new
                        {
                            ID = "a4bf3aa8-c5fa-4348-9a75-6b132bade208",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(797),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 18),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "6a4e0f51-523b-4ffd-b58e-2ab96e46b375",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(806),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 19),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(16, 30, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "1d65baa5-eb10-47d1-845b-2edc652ac77d",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(811),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 20),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(14, 30, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "17e391bf-8908-4692-8136-6dfb3c9dcf96",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(815),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 21),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(15, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "99a6a776-738c-43e6-b4ad-adc899bc2b75",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(820),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 24),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(14, 30, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "514d64e8-5d71-4b55-b808-c5998b90f405",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(824),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 25),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(18, 0, 0),
                            WorkLocationID = "8ca4ff43-6da4-490e-ac6e-b493b7054baf",
                            WorkStart = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            ID = "a33bf103-f861-4995-8816-ea231aa52e8f",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(829),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 26),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(12, 30, 0),
                            WorkLocationID = "fbda133c-eeb6-4b07-a173-3873e87f3767",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "4199a8aa-2b73-4ffc-8bab-8aca4d78b501",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(833),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 27),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(16, 0, 0),
                            WorkLocationID = "8ca4ff43-6da4-490e-ac6e-b493b7054baf",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "6e03dd08-0f2d-49aa-abe6-c5b5a7dec4fd",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(838),
                            AuthorID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            Date = new DateOnly(2024, 6, 28),
                            UserID = "8b4eb9ef-1ddb-49b1-9b25-fc200b63d63f",
                            WorkEnd = new TimeOnly(16, 30, 0),
                            WorkLocationID = "cf9220d9-b583-4831-aff4-c7517ff84888",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "fc69443c-bb26-463c-81b3-c4897d1f1530",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(843),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 3),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "32319c27-ebab-415c-a836-f701595519d3",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "e8d2da5c-33b9-4d93-be95-a276c30efe3d",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(847),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 5),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "32319c27-ebab-415c-a836-f701595519d3",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "704e6de6-e60e-4afc-bbc1-61f0cb2d4ae0",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(851),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 6),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "fbda133c-eeb6-4b07-a173-3873e87f3767",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "e6ed8d0e-9de8-42dd-a364-b36b1a7634d2",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(856),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 7),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(16, 0, 0),
                            WorkLocationID = "a5e51680-f19e-4836-926a-ecb947eae937",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "830af400-9f02-4b71-98cb-f5005a716db8",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(860),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 10),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "32319c27-ebab-415c-a836-f701595519d3",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "8faa518a-20e5-483f-9863-4443b47dca8d",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(865),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 11),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(16, 30, 0),
                            WorkLocationID = "32319c27-ebab-415c-a836-f701595519d3",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "6e9a4d3e-bdd2-476a-8a07-7c4eb9a0f16f",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(869),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 12),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "fbda133c-eeb6-4b07-a173-3873e87f3767",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "7f028452-94aa-4185-a7b8-971b4141f0f0",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(873),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 13),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(15, 30, 0),
                            WorkLocationID = "fbda133c-eeb6-4b07-a173-3873e87f3767",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "b6139bae-58be-4341-88d1-6674d284fb3a",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(878),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 14),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(16, 30, 0),
                            WorkLocationID = "32319c27-ebab-415c-a836-f701595519d3",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "b0acad31-fb2b-4e08-829f-24f339215545",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(882),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 15),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(14, 0, 0),
                            WorkLocationID = "fbda133c-eeb6-4b07-a173-3873e87f3767",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "9f2a4ad8-4470-4dd1-aea5-1de5f14fe12b",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(887),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 17),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "a38e086c-f980-4b8a-b6b2-de40cf2e39a0",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(891),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 18),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(17, 0, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "5948aa6a-966e-47e6-a0c3-6f1954077827",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(895),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 19),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(16, 30, 0),
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "5919896d-f2b2-4656-9e46-fb4050211f1b",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(900),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 20),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(16, 30, 0),
                            WorkLocationID = "1a5fc842-45c2-4eb1-b252-904e9e8a1725",
                            WorkStart = new TimeOnly(4, 30, 0)
                        },
                        new
                        {
                            ID = "e61875cf-3467-4653-917d-2b1bd60a5e06",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(978),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 21),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(15, 30, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "7566cb39-0dc7-48d6-bacb-8982803b7c9d",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(985),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 24),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(16, 0, 0),
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "ef1f9a3d-a2b0-40f9-a27d-b44ffe2bfb9d",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(990),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 26),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(17, 30, 0),
                            WorkLocationID = "c31c6339-82b5-4249-87dc-14e8b09a1276",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "89cf0ab5-b392-4461-a144-cc1538a29db0",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(994),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 27),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(16, 0, 0),
                            WorkLocationID = "8ca4ff43-6da4-490e-ac6e-b493b7054baf",
                            WorkStart = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            ID = "1f38a532-3ed4-42c5-9195-9b5ec4c5e1fe",
                            Active = true,
                            AddDate = new DateTime(2024, 10, 4, 14, 11, 40, 182, DateTimeKind.Local).AddTicks(999),
                            AuthorID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            Date = new DateOnly(2024, 6, 28),
                            UserID = "68553cdf-0a20-4969-9693-c49315c7df58",
                            WorkEnd = new TimeOnly(19, 0, 0),
                            WorkLocationID = "e4aa4014-3ae3-456c-ae08-d992f4713524",
                            WorkStart = new TimeOnly(5, 30, 0)
                        });
                });

            modelBuilder.Entity("Wasko.ModelWorkLocation", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("NewId()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("WorkLocations");

                    b.HasData(
                        new
                        {
                            ID = "fd9991df-5d66-4b30-92df-a3c6b64748ca",
                            Active = true,
                            Name = "Nieustawiona"
                        },
                        new
                        {
                            ID = "047921e7-1329-4542-acd3-119bcb645077",
                            Active = true,
                            Name = "Drive"
                        },
                        new
                        {
                            ID = "b721d3d1-04cd-4244-9fa7-751b085aebfc",
                            Active = true,
                            Name = "Office"
                        },
                        new
                        {
                            ID = "c31c6339-82b5-4249-87dc-14e8b09a1276",
                            Active = true,
                            Name = "3maja"
                        },
                        new
                        {
                            ID = "fbda133c-eeb6-4b07-a173-3873e87f3767",
                            Active = true,
                            Name = "Pychowicka"
                        },
                        new
                        {
                            ID = "a5e51680-f19e-4836-926a-ecb947eae937",
                            Active = true,
                            Name = "Wizjonerów"
                        },
                        new
                        {
                            ID = "49667c7f-80d9-4436-ac6e-e11c2f96a1f5",
                            Active = true,
                            Name = "Grzegórzecka"
                        },
                        new
                        {
                            ID = "32319c27-ebab-415c-a836-f701595519d3",
                            Active = true,
                            Name = "Tarnów Dach"
                        },
                        new
                        {
                            ID = "5a3a2d6b-b21b-486e-bcf0-5cff0637396d",
                            Active = true,
                            Name = "Tarnów Eurovia"
                        },
                        new
                        {
                            ID = "e4aa4014-3ae3-456c-ae08-d992f4713524",
                            Active = true,
                            Name = "Quattro"
                        },
                        new
                        {
                            ID = "f90a6f03-1109-438e-bb07-1ba7e5900ea3",
                            Active = true,
                            Name = "Rondo"
                        },
                        new
                        {
                            ID = "0e267c34-0a14-4818-8ed3-6f835bf4108a",
                            Active = true,
                            Name = "Narama"
                        },
                        new
                        {
                            ID = "1a5fc842-45c2-4eb1-b252-904e9e8a1725",
                            Active = true,
                            Name = "Kielce"
                        },
                        new
                        {
                            ID = "8ca4ff43-6da4-490e-ac6e-b493b7054baf",
                            Active = true,
                            Name = "Piaskowa"
                        },
                        new
                        {
                            ID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb",
                            Active = true,
                            Name = "Poleska"
                        },
                        new
                        {
                            ID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c",
                            Active = true,
                            Name = "Mogilska"
                        },
                        new
                        {
                            ID = "cf9220d9-b583-4831-aff4-c7517ff84888",
                            Active = true,
                            Name = "Henniger Graby"
                        },
                        new
                        {
                            ID = "1db06608-e532-45b2-b1a8-3cfeaab85f3d",
                            Active = true,
                            Name = "klimanowa"
                        });
                });

            modelBuilder.Entity("Wasko.ModelWorkLocationRole", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.ToTable("WorkLocationRoles");

                    b.HasData(
                        new
                        {
                            ID = "1638d369-1b20-48fb-a8f7-586040ecbf51",
                            AuthorID = "cb24a0c2-506f-4810-880b-7f6caa1c21b8",
                            Name = "Chord"
                        });
                });

            modelBuilder.Entity("Wasko.ModelWorkLocationRoleWorkLocation", b =>
                {
                    b.Property<string>("LocationID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RoleID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("LocationID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("ModelWorkLocationRoleWorkLocation");
                });

            modelBuilder.Entity("Wasko.ModelWorkLocationTargetRole", b =>
                {
                    b.Property<string>("RoleID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("WorkLocationID")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("RoleID", "WorkLocationID");

                    b.HasIndex("WorkLocationID");

                    b.ToTable("WorkLocationTargetRoles");

                    b.HasData(
                        new
                        {
                            RoleID = "38dcacea-ee73-4c98-bc7b-cfba196ccab5",
                            WorkLocationID = "fd9991df-5d66-4b30-92df-a3c6b64748ca"
                        },
                        new
                        {
                            RoleID = "38dcacea-ee73-4c98-bc7b-cfba196ccab5",
                            WorkLocationID = "047921e7-1329-4542-acd3-119bcb645077"
                        },
                        new
                        {
                            RoleID = "38dcacea-ee73-4c98-bc7b-cfba196ccab5",
                            WorkLocationID = "b721d3d1-04cd-4244-9fa7-751b085aebfc"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "c31c6339-82b5-4249-87dc-14e8b09a1276"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "fbda133c-eeb6-4b07-a173-3873e87f3767"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "a5e51680-f19e-4836-926a-ecb947eae937"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "49667c7f-80d9-4436-ac6e-e11c2f96a1f5"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "32319c27-ebab-415c-a836-f701595519d3"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "5a3a2d6b-b21b-486e-bcf0-5cff0637396d"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "e4aa4014-3ae3-456c-ae08-d992f4713524"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "f90a6f03-1109-438e-bb07-1ba7e5900ea3"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "0e267c34-0a14-4818-8ed3-6f835bf4108a"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "1a5fc842-45c2-4eb1-b252-904e9e8a1725"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "8ca4ff43-6da4-490e-ac6e-b493b7054baf"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "295508c3-b32e-4b97-bc9c-5b1eeef4c6fb"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "c1cfab1c-eb87-4a5f-919b-5ca7b1f7b50c"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "cf9220d9-b583-4831-aff4-c7517ff84888"
                        },
                        new
                        {
                            RoleID = "05e6fbeb-ad91-4dfb-bfc3-298fac57e6b4",
                            WorkLocationID = "1db06608-e532-45b2-b1a8-3cfeaab85f3d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Wasko.ModelRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Wasko.ModelUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Wasko.ModelUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Wasko.ModelRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Wasko.ModelUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wasko.ModelBonus", b =>
                {
                    b.HasOne("Wasko.ModelUser", "Approver")
                        .WithMany("ApprovedBonuses")
                        .HasForeignKey("ApproverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Wasko.ModelUser", "Creator")
                        .WithMany("CreatedBonuses")
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelUser", "Target")
                        .WithMany("UsersBonuses")
                        .HasForeignKey("TargetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Creator");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Wasko.ModelChord", b =>
                {
                    b.HasOne("Wasko.ModelUser", "Creator")
                        .WithMany("CreatedChords")
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Wasko.ModelChordPrice", b =>
                {
                    b.HasOne("Wasko.ModelChord", "Chord")
                        .WithMany("Prices")
                        .HasForeignKey("ChordID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelUser", "Creator")
                        .WithMany("ChangedChordsPrices")
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chord");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Wasko.ModelDayOffDate", b =>
                {
                    b.HasOne("Wasko.ModelUser", "Approver")
                        .WithMany("DaysOffDateApprover")
                        .HasForeignKey("ApproverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Wasko.ModelUser", "Author")
                        .WithMany("DaysOffDateAuthor")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Wasko.ModelDayOffDateTargetRole", b =>
                {
                    b.HasOne("Wasko.ModelDayOffDate", "DayOff")
                        .WithMany()
                        .HasForeignKey("DayOffID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelRole", "Target")
                        .WithMany()
                        .HasForeignKey("TargetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DayOff");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Wasko.ModelDayOffDateTargetUser", b =>
                {
                    b.HasOne("Wasko.ModelDayOffDate", "DayOff")
                        .WithMany()
                        .HasForeignKey("DayOffID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelUser", "Target")
                        .WithMany()
                        .HasForeignKey("TargetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DayOff");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Wasko.ModelDayOffExpression", b =>
                {
                    b.HasOne("Wasko.ModelUser", "Approver")
                        .WithMany("DaysOffExpressionApprover")
                        .HasForeignKey("ApproverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Wasko.ModelUser", "Author")
                        .WithMany("DaysOffExpressionAuthor")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Wasko.ModelDayOffExpressionTargetRole", b =>
                {
                    b.HasOne("Wasko.ModelDayOffExpression", "DayOff")
                        .WithMany()
                        .HasForeignKey("DayOffID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelRole", "Target")
                        .WithMany()
                        .HasForeignKey("TargetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DayOff");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Wasko.ModelDayOffExpressionTargetUser", b =>
                {
                    b.HasOne("Wasko.ModelDayOffExpression", "DayOff")
                        .WithMany()
                        .HasForeignKey("DayOffID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelUser", "Target")
                        .WithMany()
                        .HasForeignKey("TargetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DayOff");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Wasko.ModelFound", b =>
                {
                    b.HasOne("Wasko.ModelUser", "Approver")
                        .WithMany("ApprovedFounds")
                        .HasForeignKey("ApproverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Wasko.ModelUser", "Creator")
                        .WithMany("CreatedFounds")
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelUser", "Target")
                        .WithMany("UsersFounded")
                        .HasForeignKey("TargetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Creator");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Wasko.ModelNotification", b =>
                {
                    b.HasOne("Wasko.ModelUser", "Target")
                        .WithMany("Notifications")
                        .HasForeignKey("TargetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Wasko.ModelProfil", b =>
                {
                    b.HasOne("Wasko.ModelUser", "User")
                        .WithOne("Profil")
                        .HasForeignKey("Wasko.ModelProfil", "ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasko.ModelRole", b =>
                {
                    b.HasOne("Wasko.ModelUser", "Author")
                        .WithMany("CreatedRoles")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Wasko.ModelUserSalary", b =>
                {
                    b.HasOne("Wasko.ModelUser", "Approver")
                        .WithMany("Salary")
                        .HasForeignKey("ApproverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Wasko.ModelUser", "User")
                        .WithMany("ApprovedSalary")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wasko.ModelWorkChord", b =>
                {
                    b.HasOne("Wasko.ModelUser", "Author")
                        .WithMany("CreatedWorkChords")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelChord", "Chord")
                        .WithMany("WorkChords")
                        .HasForeignKey("ChordID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelWorkHour", "WorkHour")
                        .WithMany("Chords")
                        .HasForeignKey("WorkHourID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Chord");

                    b.Navigation("WorkHour");
                });

            modelBuilder.Entity("Wasko.ModelWorkHour", b =>
                {
                    b.HasOne("Wasko.ModelUser", "Author")
                        .WithMany("CreatedWorkHours")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelUser", "User")
                        .WithMany("WorkHours")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelWorkLocation", "WorkLocation")
                        .WithMany("WorkHours")
                        .HasForeignKey("WorkLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("User");

                    b.Navigation("WorkLocation");
                });

            modelBuilder.Entity("Wasko.ModelWorkLocationRole", b =>
                {
                    b.HasOne("Wasko.ModelUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Wasko.ModelWorkLocationRoleWorkLocation", b =>
                {
                    b.HasOne("Wasko.ModelWorkLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelWorkLocationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Wasko.ModelWorkLocationTargetRole", b =>
                {
                    b.HasOne("Wasko.ModelRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wasko.ModelWorkLocation", "WorkLocation")
                        .WithMany()
                        .HasForeignKey("WorkLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("WorkLocation");
                });

            modelBuilder.Entity("Wasko.ModelChord", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("WorkChords");
                });

            modelBuilder.Entity("Wasko.ModelUser", b =>
                {
                    b.Navigation("ApprovedBonuses");

                    b.Navigation("ApprovedFounds");

                    b.Navigation("ApprovedSalary");

                    b.Navigation("ChangedChordsPrices");

                    b.Navigation("CreatedBonuses");

                    b.Navigation("CreatedChords");

                    b.Navigation("CreatedFounds");

                    b.Navigation("CreatedRoles");

                    b.Navigation("CreatedWorkChords");

                    b.Navigation("CreatedWorkHours");

                    b.Navigation("DaysOffDateApprover");

                    b.Navigation("DaysOffDateAuthor");

                    b.Navigation("DaysOffExpressionApprover");

                    b.Navigation("DaysOffExpressionAuthor");

                    b.Navigation("Notifications");

                    b.Navigation("Profil");

                    b.Navigation("Salary");

                    b.Navigation("UsersBonuses");

                    b.Navigation("UsersFounded");

                    b.Navigation("WorkHours");
                });

            modelBuilder.Entity("Wasko.ModelWorkHour", b =>
                {
                    b.Navigation("Chords");
                });

            modelBuilder.Entity("Wasko.ModelWorkLocation", b =>
                {
                    b.Navigation("WorkHours");
                });
#pragma warning restore 612, 618
        }
    }
}
